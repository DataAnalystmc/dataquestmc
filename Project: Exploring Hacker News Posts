+*In[4]:*+
[source, ipython3]
----
import csv

# Read the hacker_news.csv file as a list of lists
with open('hacker_news.csv', 'r') as file:
    reader = csv.reader(file)
    hn = list(reader)

# Display the first five rows of hn
hn[:5]

----


+*Out[4]:*+
----[['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at'],
 ['12224879',
  'Interactive Dynamic Video',
  'http://www.interactivedynamicvideo.com/',
  '386',
  '52',
  'ne0phyte',
  '8/4/2016 11:52'],
 ['10975351',
  'How to Use Open Source and Shut the Fuck Up at the Same Time',
  'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/',
  '39',
  '10',
  'josep2',
  '1/26/2016 19:30'],
 ['11964716',
  "Florida DJs May Face Felony for April Fools' Water Joke",
  'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/',
  '2',
  '1',
  'vezycash',
  '6/23/2016 22:20'],
 ['11919867',
  'Technology ventures: From Idea to Enterprise',
  'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429',
  '3',
  '1',
  'hswarna',
  '6/17/2016 0:01']]----


+*In[5]:*+
[source, ipython3]
----
# Extract the first row and assign it to headers
headers = hn[0]

# Remove the first row from hn
hn = hn[1:]

# Display headers and the first five rows of hn to verify
headers, hn[:5]

----


+*Out[5]:*+
----(['id', 'title', 'url', 'num_points', 'num_comments', 'author', 'created_at'],
 [['12224879',
   'Interactive Dynamic Video',
   'http://www.interactivedynamicvideo.com/',
   '386',
   '52',
   'ne0phyte',
   '8/4/2016 11:52'],
  ['10975351',
   'How to Use Open Source and Shut the Fuck Up at the Same Time',
   'http://hueniverse.com/2016/01/26/how-to-use-open-source-and-shut-the-fuck-up-at-the-same-time/',
   '39',
   '10',
   'josep2',
   '1/26/2016 19:30'],
  ['11964716',
   "Florida DJs May Face Felony for April Fools' Water Joke",
   'http://www.thewire.com/entertainment/2013/04/florida-djs-april-fools-water-joke/63798/',
   '2',
   '1',
   'vezycash',
   '6/23/2016 22:20'],
  ['11919867',
   'Technology ventures: From Idea to Enterprise',
   'https://www.amazon.com/Technology-Ventures-Enterprise-Thomas-Byers/dp/0073523429',
   '3',
   '1',
   'hswarna',
   '6/17/2016 0:01'],
  ['10301696',
   'Note by Note: The Making of Steinway L1037 (2007)',
   'http://www.nytimes.com/2007/11/07/movies/07stein.html?_r=0',
   '8',
   '2',
   'walterbell',
   '9/30/2015 4:12']])----


+*In[6]:*+
[source, ipython3]
----
# Create three empty lists for different types of posts
ask_posts = []
show_posts = []
other_posts = []

# Loop through each row in hn
for row in hn:
    title = row[1]  # Title is the second column
    # Check if the title starts with 'ask hn' or 'show hn' (case-insensitive)
    if title.lower().startswith('ask hn'):
        ask_posts.append(row)
    elif title.lower().startswith('show hn'):
        show_posts.append(row)
    else:
        other_posts.append(row)

# Check the number of posts in each list
len_ask_posts = len(ask_posts)
len_show_posts = len(show_posts)
len_other_posts = len(other_posts)

len_ask_posts, len_show_posts, len_other_posts

----


+*Out[6]:*+
----(1744, 1162, 17194)----


+*In[7]:*+
[source, ipython3]
----
# Initialize variables for total comments in ask and show posts
total_ask_comments = 0
total_show_comments = 0

# Calculate total comments in ask posts
for post in ask_posts:
    total_ask_comments += int(post[4])  # num_comments is at index 4

# Calculate average comments on ask posts
avg_ask_comments = total_ask_comments / len_ask_posts

# Calculate total comments in show posts
for post in show_posts:
    total_show_comments += int(post[4])  # num_comments is at index 4

# Calculate average comments on show posts
avg_show_comments = total_show_comments / len_show_posts

avg_ask_comments, avg_show_comments

----


+*Out[7]:*+
----(14.038417431192661, 10.31669535283993)----


+*In[8]:*+
[source, ipython3]
----
import datetime as dt

# Create an empty list for storing created_at and number of comments
result_list = []

# Populate result_list with data from ask_posts
for post in ask_posts:
    created_at = post[6]  # created_at is the seventh column
    num_comments = int(post[4])  # num_comments is the fifth column
    result_list.append([created_at, num_comments])

# Create empty dictionaries for storing post counts and comment counts by hour
counts_by_hour = {}
comments_by_hour = {}

# Populate the dictionaries
for result in result_list:
    created_at, num_comments = result
    dt_object = dt.datetime.strptime(created_at, "%m/%d/%Y %H:%M")
    hour = dt_object.strftime("%H")
    
    if hour not in counts_by_hour:
        counts_by_hour[hour] = 1
        comments_by_hour[hour] = num_comments
    else:
        counts_by_hour[hour] += 1
        comments_by_hour[hour] += num_comments

counts_by_hour, comments_by_hour

----


+*Out[8]:*+
----({'09': 45,
  '13': 85,
  '10': 59,
  '14': 107,
  '16': 108,
  '23': 68,
  '12': 73,
  '17': 100,
  '15': 116,
  '21': 109,
  '20': 80,
  '02': 58,
  '18': 109,
  '03': 54,
  '05': 46,
  '19': 110,
  '01': 60,
  '22': 71,
  '08': 48,
  '04': 47,
  '00': 55,
  '06': 44,
  '07': 34,
  '11': 58},
 {'09': 251,
  '13': 1253,
  '10': 793,
  '14': 1416,
  '16': 1814,
  '23': 543,
  '12': 687,
  '17': 1146,
  '15': 4477,
  '21': 1745,
  '20': 1722,
  '02': 1381,
  '18': 1439,
  '03': 421,
  '05': 464,
  '19': 1188,
  '01': 683,
  '22': 479,
  '08': 492,
  '04': 337,
  '00': 447,
  '06': 397,
  '07': 267,
  '11': 641})----


+*In[9]:*+
[source, ipython3]
----
# Calculate the average number of comments per post for posts created during each hour
avg_by_hour = []

for hour in counts_by_hour:
    avg_comments = comments_by_hour[hour] / counts_by_hour[hour]
    avg_by_hour.append([hour, avg_comments])

avg_by_hour.sort()  # Sorting by hour for better readability
avg_by_hour

----


+*Out[9]:*+
----[['00', 8.127272727272727],
 ['01', 11.383333333333333],
 ['02', 23.810344827586206],
 ['03', 7.796296296296297],
 ['04', 7.170212765957447],
 ['05', 10.08695652173913],
 ['06', 9.022727272727273],
 ['07', 7.852941176470588],
 ['08', 10.25],
 ['09', 5.5777777777777775],
 ['10', 13.440677966101696],
 ['11', 11.051724137931034],
 ['12', 9.41095890410959],
 ['13', 14.741176470588234],
 ['14', 13.233644859813085],
 ['15', 38.5948275862069],
 ['16', 16.796296296296298],
 ['17', 11.46],
 ['18', 13.20183486238532],
 ['19', 10.8],
 ['20', 21.525],
 ['21', 16.009174311926607],
 ['22', 6.746478873239437],
 ['23', 7.985294117647059]]----


+*In[10]:*+
[source, ipython3]
----
# Swap the columns in avg_by_hour
swap_avg_by_hour = [[avg, hour] for [hour, avg] in avg_by_hour]

# Sort swap_avg_by_hour in descending order by average number of comments
sorted_swap = sorted(swap_avg_by_hour, reverse=True)

# Display the top 5 hours for Ask Posts comments
print("Top 5 Hours for Ask Posts Comments")

for avg, hour in sorted_swap[:5]:
    dt_object = dt.datetime.strptime(hour, "%H")
    formatted_hour = dt_object.strftime("%H:%M")
    print("{}: {:.2f} average comments per post".format(formatted_hour, avg))

----


+*Out[10]:*+
----
Top 5 Hours for Ask Posts Comments
15:00: 38.59 average comments per post
02:00: 23.81 average comments per post
20:00: 21.52 average comments per post
16:00: 16.80 average comments per post
21:00: 16.01 average comments per post
----


+*In[11]:*+
[source, ipython3]
----
In this analysis of 'Ask Posts' on Hacker News, the data shows that the timing of a post significantly impacts the number of comments it receives. The standout time is 15:00 UTC, with an average of 38.59 comments per post. Other notable times are 02:00 and 20:00 UTC, averaging around 23.81 and 21.52 comments respectively. For those based in the Central Time Zone, like in Chicago, these peak times translate to 10:00 AM, 9:00 PM, and 3:00 PM local time
----


+*Out[11]:*+
----

      File "<ipython-input-11-d1705f9bb52a>", line 1
        In this analysis of 'Ask Posts' on Hacker News, the data shows that the timing of a post significantly impacts the number of comments it receives. The standout time is 15:00 UTC, with an average of 38.59 comments per post. Other notable times are 02:00 and 20:00 UTC, averaging around 23.81 and 21.52 comments respectively. For those based in the Central Time Zone, like in Chicago, these peak times translate to 10:00 AM, 9:00 PM, and 3:00 PM local time
           ^
    SyntaxError: invalid syntax


----


+*In[ ]:*+
[source, ipython3]
----

----
